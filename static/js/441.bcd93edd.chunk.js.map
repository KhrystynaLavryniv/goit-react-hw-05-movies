{"version":3,"file":"static/js/441.bcd93edd.chunk.js","mappings":"+LAEaA,E,QAAkBC,GAAAA,IAAH,8F,SCS5B,EARe,WACb,OACE,UAACD,EAAD,YACE,SAAC,KAAD,CAAUE,MAAM,UAAUC,OAAQ,GAAIC,MAAO,KAD/C,S,qHCHSC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OACE,kBAAMA,SAAUA,EAAhB,WACE,kBAAOC,KAAK,OAAOC,aAAa,MAAMC,WAAS,EAACC,KAAK,WACrD,mBAAQH,KAAK,SAAb,wB,8BCmEN,EAjEmB,WACjB,OAA4BI,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BL,EAAAA,EAAAA,WAAS,GAAvC,eAAOM,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAcN,EAAaO,IAAI,SAoCrC,OA5BAC,EAAAA,EAAAA,YAAU,WACR,GAAoB,KAAhBF,EACF,OAAOG,EAAAA,GAAAA,MAAY,6CAEhBH,IAGLH,GAAW,IACXO,EAAAA,EAAAA,IAAkBJ,GACfK,MAAK,SAAAC,GACJ,IACUC,EACND,EADFA,KAAQC,QAGV,GAAuB,IAAnBA,EAAQC,OACV,OAAOL,EAAAA,GAAAA,MACL,yDAIJX,EAAUe,MAEXE,OAAM,SAAAC,GACL,OAAOP,EAAAA,GAAAA,MAAY,6CAEpBQ,QAAQd,GAAW,OACrB,CAACG,KAGF,iCACE,SAAChB,EAAD,CAAWC,SApCM,SAAA2B,GACnBA,EAAIC,iBACJlB,EAAgB,CAAEmB,MAAOF,EAAIG,cAAcC,SAASF,MAAMG,QAC1DL,EAAIG,cAAcC,SAASF,MAAMG,MAAQ,MAmCtCrB,IAAW,SAACsB,EAAA,EAAD,IAEX3B,GAAU4B,QAAQC,IAAI7B,GAEtBA,IACC,wBACGA,EAAO8B,KAAI,SAAAC,GACV,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAM5B,GAAhD,SACGwB,EAAMK,SAFFL,EAAME,c,0MCzDvBI,EAAW,+BACXC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACQC,IAAAA,IAAA,UAAaH,EAAb,uCAAoDC,IAD5D,0GAIA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,iFACQF,IAAAA,IAAA,UAAaH,EAAb,kBAA+BK,EAA/B,oBAAkDJ,IAD1D,0GAIA,SAAezB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCa,GAAjC,iFACQc,IAAAA,IAAA,UACRH,EADQ,iCACyBC,EADzB,kBAC0CZ,EAD1C,yBADR,0GAMA,SAAeiB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,iFACQF,IAAAA,IAAA,UACRH,EADQ,kBACUK,EADV,4BACqCJ,IAF7C,0GAMA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,iFACQF,IAAAA,IAAA,UACRH,EADQ,kBACUK,EADV,4BACqCJ,IAF7C","sources":["components/Loader/Loader.style.jsx","components/Loader/Loader.jsx","components/SearchBar/SearchBar.jsx","pages/MoviesPage.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { TailSpin } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.style.jsx';\n\nconst Loader = () => {\n  return (\n    <LoaderContainer>\n      <TailSpin color=\"#00BFFF\" height={80} width={80} />;\n    </LoaderContainer>\n  );\n};\n\nexport default Loader;\n","import PropTypes from 'prop-types';\n\nexport const SearchBar = ({ onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" autoComplete=\"off\" autoFocus name=\"query\" />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMovieByQuery } from '../services/api';\nimport { SearchBar } from '../components/SearchBar/SearchBar';\nimport { Link, useLocation } from 'react-router-dom';\nimport Loader from '../components/Loader/Loader';\nimport toast from 'react-hot-toast';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n  const searchQuery = searchParams.get('query');\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setSearchParams({ query: evt.currentTarget.elements.query.value });\n    evt.currentTarget.elements.query.value = '';\n  };\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return toast.error(\"Sorry, but you didn't enter a movie title\");\n    }\n    if (!searchQuery) {\n      return;\n    }\n    setLoading(true);\n    fetchMovieByQuery(searchQuery)\n      .then(data => {\n        const {\n          data: { results },\n        } = data;\n\n        if (results.length === 0) {\n          return toast.error(\n            'Sorry, there are no movies with that title, try again'\n          );\n        }\n\n        setMovies(results);\n      })\n      .catch(error => {\n        return toast.error('Sorry, something went wrong, try again');\n      })\n      .finally(setLoading(false));\n  }, [searchQuery]);\n\n  return (\n    <>\n      <SearchBar onSubmit={handleSubmit} />\n\n      {loading && <Loader />}\n\n      {movies && console.log(movies)}\n\n      {movies && (\n        <ul>\n          {movies.map(movie => {\n            return (\n              <li key={movie.id}>\n                <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                  {movie.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\nexport default MoviesPage;\n","import axios from 'axios';\n// axios.defaults.baseURL =\n//   'https://api.themoviedb.org/3/movie/550?api_key=958a441e98a3a2e7212356a4dfcbfc32';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '958a441e98a3a2e7212356a4dfcbfc32';\n\nexport async function fetchTrandingMovies() {\n  return await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n}\n\nexport async function fetchMovieById(movieId) {\n  return await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n}\n\nexport async function fetchMovieByQuery(value) {\n  return await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${value}&include_adult=false`\n  );\n}\n\nexport async function fetchMovieCredits(movieId) {\n  return await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n}\n\nexport async function fetchMovieReviews(movieId) {\n  return await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n}\n"],"names":["LoaderContainer","styled","color","height","width","SearchBar","onSubmit","type","autoComplete","autoFocus","name","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","loading","setLoading","location","useLocation","searchQuery","get","useEffect","toast","fetchMovieByQuery","then","data","results","length","catch","error","finally","evt","preventDefault","query","currentTarget","elements","value","Loader","console","log","map","movie","to","id","state","from","title","BASE_URL","API_KEY","fetchTrandingMovies","axios","fetchMovieById","movieId","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}